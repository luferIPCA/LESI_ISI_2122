//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsaSOAPeREST.WSSoap {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Varios", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Varios : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SomaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Soma {
            get {
                return this.SomaField;
            }
            set {
                if ((this.SomaField.Equals(value) != true)) {
                    this.SomaField = value;
                    this.RaisePropertyChanged("Soma");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sub {
            get {
                return this.SubField;
            }
            set {
                if ((this.SubField.Equals(value) != true)) {
                    this.SubField = value;
                    this.RaisePropertyChanged("Sub");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Succ {
            get {
                return this.SuccField;
            }
            set {
                if ((this.SuccField.Equals(value) != true)) {
                    this.SuccField = value;
                    this.RaisePropertyChanged("Succ");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSSoap.ICalcREST")]
    public interface ICalcREST {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/AddRest", ReplyAction="http://tempuri.org/ICalcREST/AddRestResponse")]
        int AddRest(string x, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/AddRest", ReplyAction="http://tempuri.org/ICalcREST/AddRestResponse")]
        System.Threading.Tasks.Task<int> AddRestAsync(string x, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/SumSubRest", ReplyAction="http://tempuri.org/ICalcREST/SumSubRestResponse")]
        UsaSOAPeREST.WSSoap.Varios SumSubRest(string x, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/SumSubRest", ReplyAction="http://tempuri.org/ICalcREST/SumSubRestResponse")]
        System.Threading.Tasks.Task<UsaSOAPeREST.WSSoap.Varios> SumSubRestAsync(string x, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/DivRest", ReplyAction="http://tempuri.org/ICalcREST/DivRestResponse")]
        double DivRest(string x, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcREST/DivRest", ReplyAction="http://tempuri.org/ICalcREST/DivRestResponse")]
        System.Threading.Tasks.Task<double> DivRestAsync(string x, string y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcRESTChannel : UsaSOAPeREST.WSSoap.ICalcREST, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcRESTClient : System.ServiceModel.ClientBase<UsaSOAPeREST.WSSoap.ICalcREST>, UsaSOAPeREST.WSSoap.ICalcREST {
        
        public CalcRESTClient() {
        }
        
        public CalcRESTClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcRESTClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcRESTClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcRESTClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddRest(string x, string y) {
            return base.Channel.AddRest(x, y);
        }
        
        public System.Threading.Tasks.Task<int> AddRestAsync(string x, string y) {
            return base.Channel.AddRestAsync(x, y);
        }
        
        public UsaSOAPeREST.WSSoap.Varios SumSubRest(string x, string y) {
            return base.Channel.SumSubRest(x, y);
        }
        
        public System.Threading.Tasks.Task<UsaSOAPeREST.WSSoap.Varios> SumSubRestAsync(string x, string y) {
            return base.Channel.SumSubRestAsync(x, y);
        }
        
        public double DivRest(string x, string y) {
            return base.Channel.DivRest(x, y);
        }
        
        public System.Threading.Tasks.Task<double> DivRestAsync(string x, string y) {
            return base.Channel.DivRestAsync(x, y);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSSoap.ICalcSOAP")]
    public interface ICalcSOAP {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/Add", ReplyAction="http://tempuri.org/ICalcSOAP/AddResponse")]
        int Add(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/Add", ReplyAction="http://tempuri.org/ICalcSOAP/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/SumSub", ReplyAction="http://tempuri.org/ICalcSOAP/SumSubResponse")]
        UsaSOAPeREST.WSSoap.Varios SumSub(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/SumSub", ReplyAction="http://tempuri.org/ICalcSOAP/SumSubResponse")]
        System.Threading.Tasks.Task<UsaSOAPeREST.WSSoap.Varios> SumSubAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/Div", ReplyAction="http://tempuri.org/ICalcSOAP/DivResponse")]
        double Div(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcSOAP/Div", ReplyAction="http://tempuri.org/ICalcSOAP/DivResponse")]
        System.Threading.Tasks.Task<double> DivAsync(int x, int y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcSOAPChannel : UsaSOAPeREST.WSSoap.ICalcSOAP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcSOAPClient : System.ServiceModel.ClientBase<UsaSOAPeREST.WSSoap.ICalcSOAP>, UsaSOAPeREST.WSSoap.ICalcSOAP {
        
        public CalcSOAPClient() {
        }
        
        public CalcSOAPClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcSOAPClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcSOAPClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcSOAPClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int x, int y) {
            return base.Channel.Add(x, y);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int x, int y) {
            return base.Channel.AddAsync(x, y);
        }
        
        public UsaSOAPeREST.WSSoap.Varios SumSub(int x, int y) {
            return base.Channel.SumSub(x, y);
        }
        
        public System.Threading.Tasks.Task<UsaSOAPeREST.WSSoap.Varios> SumSubAsync(int x, int y) {
            return base.Channel.SumSubAsync(x, y);
        }
        
        public double Div(int x, int y) {
            return base.Channel.Div(x, y);
        }
        
        public System.Threading.Tasks.Task<double> DivAsync(int x, int y) {
            return base.Channel.DivAsync(x, y);
        }
    }
}
