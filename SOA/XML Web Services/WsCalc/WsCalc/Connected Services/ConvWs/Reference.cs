//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WsCalc.ConvWs {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="celsiusToFahrenheitRequest", Namespace="http://learnwebservices.com/services/tempconverter")]
    [System.SerializableAttribute()]
    public partial class celsiusToFahrenheitRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double TemperatureInCelsiusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double TemperatureInCelsius {
            get {
                return this.TemperatureInCelsiusField;
            }
            set {
                if ((this.TemperatureInCelsiusField.Equals(value) != true)) {
                    this.TemperatureInCelsiusField = value;
                    this.RaisePropertyChanged("TemperatureInCelsius");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="celsiusToFahrenheitResponse", Namespace="http://learnwebservices.com/services/tempconverter")]
    [System.SerializableAttribute()]
    public partial class celsiusToFahrenheitResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double TemperatureInFahrenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double TemperatureInFahrenheit {
            get {
                return this.TemperatureInFahrenheitField;
            }
            set {
                if ((this.TemperatureInFahrenheitField.Equals(value) != true)) {
                    this.TemperatureInFahrenheitField = value;
                    this.RaisePropertyChanged("TemperatureInFahrenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="fahrenheitToCelsiusRequest", Namespace="http://learnwebservices.com/services/tempconverter")]
    [System.SerializableAttribute()]
    public partial class fahrenheitToCelsiusRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double TemperatureInFahrenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double TemperatureInFahrenheit {
            get {
                return this.TemperatureInFahrenheitField;
            }
            set {
                if ((this.TemperatureInFahrenheitField.Equals(value) != true)) {
                    this.TemperatureInFahrenheitField = value;
                    this.RaisePropertyChanged("TemperatureInFahrenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="fahrenheitToCelsiusResponse", Namespace="http://learnwebservices.com/services/tempconverter")]
    [System.SerializableAttribute()]
    public partial class fahrenheitToCelsiusResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double TemperatureInCelsiusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double TemperatureInCelsius {
            get {
                return this.TemperatureInCelsiusField;
            }
            set {
                if ((this.TemperatureInCelsiusField.Equals(value) != true)) {
                    this.TemperatureInCelsiusField = value;
                    this.RaisePropertyChanged("TemperatureInCelsius");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://learnwebservices.com/services/tempconverter", ConfigurationName="ConvWs.TempConverterEndpoint")]
    public interface TempConverterEndpoint {
        
        // CODEGEN: Generating message contract since the operation CelsiusToFahrenheit is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        WsCalc.ConvWs.CelsiusToFahrenheitResponse1 CelsiusToFahrenheit(WsCalc.ConvWs.CelsiusToFahrenheit request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<WsCalc.ConvWs.CelsiusToFahrenheitResponse1> CelsiusToFahrenheitAsync(WsCalc.ConvWs.CelsiusToFahrenheit request);
        
        // CODEGEN: Generating message contract since the operation FahrenheitToCelsius is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        WsCalc.ConvWs.FahrenheitToCelsiusResponse1 FahrenheitToCelsius(WsCalc.ConvWs.FahrenheitToCelsius request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<WsCalc.ConvWs.FahrenheitToCelsiusResponse1> FahrenheitToCelsiusAsync(WsCalc.ConvWs.FahrenheitToCelsius request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CelsiusToFahrenheit {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://learnwebservices.com/services/tempconverter", Order=0)]
        public WsCalc.ConvWs.celsiusToFahrenheitRequest CelsiusToFahrenheitRequest;
        
        public CelsiusToFahrenheit() {
        }
        
        public CelsiusToFahrenheit(WsCalc.ConvWs.celsiusToFahrenheitRequest CelsiusToFahrenheitRequest) {
            this.CelsiusToFahrenheitRequest = CelsiusToFahrenheitRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CelsiusToFahrenheitResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://learnwebservices.com/services/tempconverter", Order=0)]
        public WsCalc.ConvWs.celsiusToFahrenheitResponse CelsiusToFahrenheitResponse;
        
        public CelsiusToFahrenheitResponse1() {
        }
        
        public CelsiusToFahrenheitResponse1(WsCalc.ConvWs.celsiusToFahrenheitResponse CelsiusToFahrenheitResponse) {
            this.CelsiusToFahrenheitResponse = CelsiusToFahrenheitResponse;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FahrenheitToCelsius {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://learnwebservices.com/services/tempconverter", Order=0)]
        public WsCalc.ConvWs.fahrenheitToCelsiusRequest FahrenheitToCelsiusRequest;
        
        public FahrenheitToCelsius() {
        }
        
        public FahrenheitToCelsius(WsCalc.ConvWs.fahrenheitToCelsiusRequest FahrenheitToCelsiusRequest) {
            this.FahrenheitToCelsiusRequest = FahrenheitToCelsiusRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FahrenheitToCelsiusResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://learnwebservices.com/services/tempconverter", Order=0)]
        public WsCalc.ConvWs.fahrenheitToCelsiusResponse FahrenheitToCelsiusResponse;
        
        public FahrenheitToCelsiusResponse1() {
        }
        
        public FahrenheitToCelsiusResponse1(WsCalc.ConvWs.fahrenheitToCelsiusResponse FahrenheitToCelsiusResponse) {
            this.FahrenheitToCelsiusResponse = FahrenheitToCelsiusResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TempConverterEndpointChannel : WsCalc.ConvWs.TempConverterEndpoint, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempConverterEndpointClient : System.ServiceModel.ClientBase<WsCalc.ConvWs.TempConverterEndpoint>, WsCalc.ConvWs.TempConverterEndpoint {
        
        public TempConverterEndpointClient() {
        }
        
        public TempConverterEndpointClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempConverterEndpointClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempConverterEndpointClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempConverterEndpointClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WsCalc.ConvWs.CelsiusToFahrenheitResponse1 WsCalc.ConvWs.TempConverterEndpoint.CelsiusToFahrenheit(WsCalc.ConvWs.CelsiusToFahrenheit request) {
            return base.Channel.CelsiusToFahrenheit(request);
        }
        
        public WsCalc.ConvWs.celsiusToFahrenheitResponse CelsiusToFahrenheit(WsCalc.ConvWs.celsiusToFahrenheitRequest CelsiusToFahrenheitRequest) {
            WsCalc.ConvWs.CelsiusToFahrenheit inValue = new WsCalc.ConvWs.CelsiusToFahrenheit();
            inValue.CelsiusToFahrenheitRequest = CelsiusToFahrenheitRequest;
            WsCalc.ConvWs.CelsiusToFahrenheitResponse1 retVal = ((WsCalc.ConvWs.TempConverterEndpoint)(this)).CelsiusToFahrenheit(inValue);
            return retVal.CelsiusToFahrenheitResponse;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WsCalc.ConvWs.CelsiusToFahrenheitResponse1> WsCalc.ConvWs.TempConverterEndpoint.CelsiusToFahrenheitAsync(WsCalc.ConvWs.CelsiusToFahrenheit request) {
            return base.Channel.CelsiusToFahrenheitAsync(request);
        }
        
        public System.Threading.Tasks.Task<WsCalc.ConvWs.CelsiusToFahrenheitResponse1> CelsiusToFahrenheitAsync(WsCalc.ConvWs.celsiusToFahrenheitRequest CelsiusToFahrenheitRequest) {
            WsCalc.ConvWs.CelsiusToFahrenheit inValue = new WsCalc.ConvWs.CelsiusToFahrenheit();
            inValue.CelsiusToFahrenheitRequest = CelsiusToFahrenheitRequest;
            return ((WsCalc.ConvWs.TempConverterEndpoint)(this)).CelsiusToFahrenheitAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WsCalc.ConvWs.FahrenheitToCelsiusResponse1 WsCalc.ConvWs.TempConverterEndpoint.FahrenheitToCelsius(WsCalc.ConvWs.FahrenheitToCelsius request) {
            return base.Channel.FahrenheitToCelsius(request);
        }
        
        public WsCalc.ConvWs.fahrenheitToCelsiusResponse FahrenheitToCelsius(WsCalc.ConvWs.fahrenheitToCelsiusRequest FahrenheitToCelsiusRequest) {
            WsCalc.ConvWs.FahrenheitToCelsius inValue = new WsCalc.ConvWs.FahrenheitToCelsius();
            inValue.FahrenheitToCelsiusRequest = FahrenheitToCelsiusRequest;
            WsCalc.ConvWs.FahrenheitToCelsiusResponse1 retVal = ((WsCalc.ConvWs.TempConverterEndpoint)(this)).FahrenheitToCelsius(inValue);
            return retVal.FahrenheitToCelsiusResponse;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WsCalc.ConvWs.FahrenheitToCelsiusResponse1> WsCalc.ConvWs.TempConverterEndpoint.FahrenheitToCelsiusAsync(WsCalc.ConvWs.FahrenheitToCelsius request) {
            return base.Channel.FahrenheitToCelsiusAsync(request);
        }
        
        public System.Threading.Tasks.Task<WsCalc.ConvWs.FahrenheitToCelsiusResponse1> FahrenheitToCelsiusAsync(WsCalc.ConvWs.fahrenheitToCelsiusRequest FahrenheitToCelsiusRequest) {
            WsCalc.ConvWs.FahrenheitToCelsius inValue = new WsCalc.ConvWs.FahrenheitToCelsius();
            inValue.FahrenheitToCelsiusRequest = FahrenheitToCelsiusRequest;
            return ((WsCalc.ConvWs.TempConverterEndpoint)(this)).FahrenheitToCelsiusAsync(inValue);
        }
    }
}
